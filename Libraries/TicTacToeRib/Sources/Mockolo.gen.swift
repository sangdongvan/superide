///
/// @Generated by Mockolo
///

#if DEBUG

    import Foundation
    import Models
    import RIBs
    import RxSwift

    public class TicTacToeRoutingMock: TicTacToeRouting {

        private var _doneInit = false

        public init() { _doneInit = true }
        public init(
            lifecycle: Observable<RouterLifecycle> = PublishSubject(),
            viewControllable: ViewControllable, interactable: Interactable,
            children: [Routing] = [Routing]()
        ) {
            self.lifecycle = lifecycle
            self.viewControllable = viewControllable
            self.interactable = interactable
            self.children = children
            _doneInit = true
        }

        private var lifecycleSubjectKind = 0
        public var lifecycleSubjectSetCallCount = 0
        public var lifecycleSubject = PublishSubject<RouterLifecycle>() {
            didSet { if _doneInit { lifecycleSubjectSetCallCount += 1 } }
        }
        public var lifecycleReplaySubject = ReplaySubject<RouterLifecycle>.create(bufferSize: 1) {
            didSet { if _doneInit { lifecycleSubjectSetCallCount += 1 } }
        }
        public var lifecycleBehaviorSubject: BehaviorSubject<RouterLifecycle>! {
            didSet { if _doneInit { lifecycleSubjectSetCallCount += 1 } }
        }
        public var lifecycleRxSubject: Observable<RouterLifecycle>! {
            didSet { if _doneInit { lifecycleSubjectSetCallCount += 1 } }
        }
        public var lifecycle: Observable<RouterLifecycle> {
            get {
                if lifecycleSubjectKind == 0 {
                    return lifecycleSubject
                } else if lifecycleSubjectKind == 1 {
                    return lifecycleBehaviorSubject
                } else if lifecycleSubjectKind == 2 {
                    return lifecycleReplaySubject
                } else {
                    return lifecycleRxSubject
                }
            }
            set {
                if let val = newValue as? PublishSubject<RouterLifecycle> {
                    lifecycleSubject = val
                    lifecycleSubjectKind = 0
                } else if let val = newValue as? BehaviorSubject<RouterLifecycle> {
                    lifecycleBehaviorSubject = val
                    lifecycleSubjectKind = 1
                } else if let val = newValue as? ReplaySubject<RouterLifecycle> {
                    lifecycleReplaySubject = val
                    lifecycleSubjectKind = 2
                } else {
                    lifecycleRxSubject = newValue
                    lifecycleSubjectKind = 3
                }
            }
        }

        public var viewControllableSetCallCount = 0
        var underlyingViewControllable: ViewControllable!
        public var viewControllable: ViewControllable {
            get { return underlyingViewControllable }
            set {
                underlyingViewControllable = newValue
                if _doneInit { viewControllableSetCallCount += 1 }
            }
        }

        public var interactableSetCallCount = 0
        var underlyingInteractable: Interactable!
        public var interactable: Interactable {
            get { return underlyingInteractable }
            set {
                underlyingInteractable = newValue
                if _doneInit { interactableSetCallCount += 1 }
            }
        }

        public var childrenSetCallCount = 0
        var underlyingChildren: [Routing] = [Routing]()
        public var children: [Routing] {
            get { return underlyingChildren }
            set {
                underlyingChildren = newValue
                if _doneInit { childrenSetCallCount += 1 }
            }
        }
        public var loadCallCount = 0
        public var loadHandler: (() -> Void)?
        public func load() {
            loadCallCount += 1

            if let loadHandler = loadHandler {
                loadHandler()
            }

        }
        public var attachChildCallCount = 0
        public var attachChildHandler: ((Routing) -> Void)?
        public func attachChild(_ child: Routing) {
            attachChildCallCount += 1

            if let attachChildHandler = attachChildHandler {
                attachChildHandler(child)
            }

        }
        public var detachChildCallCount = 0
        public var detachChildHandler: ((Routing) -> Void)?
        public func detachChild(_ child: Routing) {
            detachChildCallCount += 1

            if let detachChildHandler = detachChildHandler {
                detachChildHandler(child)
            }

        }
    }

    public class TicTacToePresentableMock: TicTacToePresentable {

        private var _doneInit = false

        public init() { _doneInit = true }
        public init(listener: TicTacToePresentableListener? = nil) {
            self.listener = listener
            _doneInit = true
        }

        public var listenerSetCallCount = 0
        var underlyingListener: TicTacToePresentableListener? = nil
        public var listener: TicTacToePresentableListener? {
            get { return underlyingListener }
            set {
                underlyingListener = newValue
                if _doneInit { listenerSetCallCount += 1 }
            }
        }
        public var setCellCallCount = 0
        public var setCellHandler: ((Int, Int, PlayerType) -> Void)?
        public func setCell(atRow row: Int, col: Int, withPlayerType playerType: PlayerType) {
            setCellCallCount += 1

            if let setCellHandler = setCellHandler {
                setCellHandler(row, col, playerType)
            }

        }
        public var announceCallCount = 0
        public var announceHandler: ((PlayerType?, @escaping () -> ()) -> Void)?
        public func announce(
            winner: PlayerType?, withCompletionHandler handler: @escaping () -> Void
        ) {
            announceCallCount += 1

            if let announceHandler = announceHandler {
                announceHandler(winner, handler)
            }

        }
    }

    public class TicTacToeListenerMock: TicTacToeListener {

        private var _doneInit = false

        public init() { _doneInit = true }

        public var ticTacToeDidEndCallCount = 0
        public var ticTacToeDidEndHandler: ((PlayerType?) -> Void)?
        public func ticTacToeDidEnd(with winner: PlayerType?) {
            ticTacToeDidEndCallCount += 1

            if let ticTacToeDidEndHandler = ticTacToeDidEndHandler {
                ticTacToeDidEndHandler(winner)
            }

        }
    }

#endif
